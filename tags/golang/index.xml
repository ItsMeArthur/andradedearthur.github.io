<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Golang on Coding Extreme </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>http://codingextre.me/tags/golang/</link>
    <language>en-us</language>
    
    <copyright>This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.</copyright>
    <updated>Sat, 11 Jun 2016 22:35:26 BRT</updated>
    
    <item>
      <title>Entendendo a arquitetura multicamadas</title>
      <link>http://codingextre.me/post/entendendo-a-arquiteture-multicamadas/</link>
      <pubDate>Sat, 11 Jun 2016 22:35:26 BRT</pubDate>
      
      <guid>http://codingextre.me/post/entendendo-a-arquiteture-multicamadas/</guid>
      <description>

&lt;p style=&#34;text-align: justify;&#34;&gt;Em termos de arquitetura de software o padrão mais difundido e comumente utilizado é a arquitetura em múltiplas camadas. Quando o assunto é software corporativo esta arquitetura é a principal escolha de muitos arquitetos, engenheiros e desenvolvedores, talvez por tanto se assimilar a estrutura organizacional encontrada em muitas corporações.&lt;/p&gt;

&lt;p style=&#34;text-align: justify;&#34;&gt;Em uma aplicação multicamadas as camadas são distribuídas horizontalmente, além disso cada camada possui uma finalidade específica no contexto da aplicação, sendo as principais camadas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Camada de Apresentação (Presentation Layer,  UI Layer, View Layer);&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Camada de Aplicação (Application Layer, Services Layer);&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Camada de Negócios (Domain Layer, Business Logic Layer);&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Camada de Dados (Persistence Layer, Data Access Layer).&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;https://i-msdn.sec.s-msft.com/dynimg/IC351011.png&#34; alt=&#34;&#34; /&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;camada-de-apresentação:dc8d0171b4151e528da98b589d5bc4fb&#34;&gt;Camada de Apresentação&lt;/h3&gt;

&lt;p style=&#34;text-align: justify;&#34;&gt;Independentemente do tipo da aplicação, seja ela mobile, web ou desktop, esta camada é responsável por interagir com o usuário da aplicação, exibindo informações contidas e processadas nas camadas inferiores, processando seus comandos e solicitações, além de também apresentar eventuais erros e exceções.&lt;/p&gt;

&lt;p style=&#34;text-align: justify;&#34;&gt;Em aplicações de menor complexidade muitas vezes esta camada se comunica diretamente com a camada de negócios, no entanto em aplicações de maior complexidade, a fim de evitar acoplamento, e prevendo a facilidade de implementação de camadas de apresentação adicionais, a interação com a camada de negócios é realizada por intermédio da camada de aplicação.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;camada-de-aplicação:dc8d0171b4151e528da98b589d5bc4fb&#34;&gt;Camada de Aplicação&lt;/h3&gt;

&lt;p style=&#34;text-align: justify;&#34;&gt;A camada de aplicação é bastante compacta, ela não possui representação dos itens ou processos contidos na camada de negócios, em vez disso ela irá coordenar os métodos, objetos e processos da camada de negócios, fazendo com que diversas tarefas que implementam o conceito de responsabilidade única (&lt;a href=&#34;http://eduardopires.net.br/2013/05/single-responsibility-principle-srp/&#34;&gt;Single Responsibility Principle&lt;/a&gt;) desempenhem tarefas de alto nível mais significativas para a camada de apresentação.&lt;/p&gt; 

&lt;p style=&#34;text-align: justify;&#34;&gt;Em algumas notações esta camada é contida dentro da camada de negócios, visto que sua função é abstrair o conteúdo da camada de negócios, impedindo que a camada de apresentação tenha muito conhecimento sobre esta, e evitando assim o demasiado acoplamento da camada de apresentação.&lt;/p&gt; 

&lt;hr /&gt;

&lt;h3 id=&#34;camada-de-negócios:dc8d0171b4151e528da98b589d5bc4fb&#34;&gt;Camada de Negócios&lt;/h3&gt;

&lt;p style=&#34;text-align: justify;&#34;&gt;Considerada por muitos como sendo a principal camada da aplicação e a que requer mais atenção ao ser projetada. A camada de negócios é responsável pela representação dos conceitos do negócio na aplicação, sendo assim ela irá conter informações sobre os objetos, regras, situações e processos fundamentais para o funcionamento adequado da aplicação.&lt;/p&gt;

&lt;p style=&#34;text-align: justify;&#34;&gt;Alguns dos objetos comumente encontrados na camada de negócios de uma aplicação comercial são objetos que representam clientes, funcionários, pedidos, notas fiscais, produtos e etc.&lt;/p&gt;

&lt;p style=&#34;text-align: justify;&#34;&gt;Por se tratar do coração da aplicação é necessário que ao projetar a camada de negócios tenha-se uma grande compreensão das necessidades do negócio, e geralmente o seu planejamento é coordenado de perto com profissionais que possuam este conhecimento.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;camada-de-dados:dc8d0171b4151e528da98b589d5bc4fb&#34;&gt;Camada de Dados&lt;/h3&gt;

&lt;p style=&#34;text-align: justify;&#34;&gt;Localizada abaixo da camada de negócios, essa camada é responsável fornecer as camadas superiores acesso simplificado aos dados da aplicação, que geralmente serão armazenados em um banco de dados relacional.&lt;/p&gt; 

&lt;p style=&#34;text-align: justify;&#34;&gt;Um exemplo do funcionado da camada de dados e utilização da mesma, é que ao invés da camada de negócios interagir diretamente com a base de dados, passando instruções SQL, recebendo linhas e colunas e mapeando esses dados em objetos, esse trabalho é abstraído pela camada de dados, que é especializada nesta tarefa.&lt;/p&gt;

&lt;h2 id=&#34;a-interação-entre-as-camadas:dc8d0171b4151e528da98b589d5bc4fb&#34;&gt;A interação entre as camadas&lt;/h2&gt;

&lt;p style=&#34;text-align: justify;&#34;&gt;Ao utilizar uma arquitetura em camadas, cada camada gera certo nível de abstração em torno da sua responsabilidade. A camada de apresentação por exemplo, não tem preocupações sobre onde ou como armazenar os dados, em manter estes dados atualizados, e nem tampouco aplica qualquer tipo de processamento ou lógica de negócios a estes dados.&lt;/p&gt; 

&lt;p style=&#34;text-align: justify;&#34;&gt;A camada de negócios, por sua vez não se preocupa sobre como formatar os dados para exibição, como exibir mensagens de erros ou de onde os dados virão. Sua única preocupação é processar os dados que são fornecidos pela camada de dados, aplicando nestes as regras de negócios, e fornecendo os mesmos para a camada de apresentação a fim que o usuário possa interagir com os mesmos.&lt;/p&gt;

&lt;p style=&#34;text-align: justify;&#34;&gt;Essa divisão de responsabilidades, onde cada camada realiza apenas uma função e não tem conhecimento sobre o funcionamento da camada superior ou inferior se dá devido ao fato de que a arquitetura de múltiplas camadas implementa tanto o Princípio da Responsabilidade Única (&lt;a href=&#34;http://eduardopires.net.br/2013/05/single-responsibility-principle-srp/&#34;&gt;Single Responsibility Principle&lt;/a&gt;)  como a Separação de Preocupações (&lt;a href=&#34;https://en.wikipedia.org/wiki/Separation_of_concerns&#34;&gt;Separation of Concerns&lt;/a&gt;).&lt;/p&gt;

&lt;h2 id=&#34;os-benefícios-da-arquitetura-multicamadas:dc8d0171b4151e528da98b589d5bc4fb&#34;&gt;Os benefícios da arquitetura multicamadas&lt;/h2&gt;

&lt;p style=&#34;text-align: justify;&#34;&gt;As mudanças sempre foram um grande inimigo do processo de desenvolvimento de software. As tecnologias usadas e consideradas como padrão de mercado estão em constante mudança.&lt;/p&gt;

&lt;p style=&#34;text-align: justify;&#34;&gt;A não muito tempo atrás no universo .NET as aplicações Windows Forms eram consideradas padrão de desenvolvimento desktop, enquanto que o Web Forms dominava as aplicações web. Atualmente o WPF e ASP.NET MVC são considerados as novas e promissoras tecnologias que se tornaram padrão para o desenvolvimento de novas aplicações .NET.&lt;/p&gt; 

&lt;p style=&#34;text-align: justify;&#34;&gt;Aqui jaz um dos principais benefícios da modularização das camadas e aplicação dos padrões de separação de preocupações e responsabilidade única.&lt;/p&gt;

&lt;p style=&#34;text-align: justify;&#34;&gt;Em uma aplicação de única camada, cuja lógica de negócios e de acesso a dados está armazenada em métodos e eventos por &#34;detrás&#34; da interface gráfica a mudança de tecnologia de apresentação ou de acesso a dados é algo completamente impensável, tornando assim a aplicação e o desenvolvedor refém de uma tecnologia ou de um fornecedor de software.&lt;/p&gt; 

&lt;p style=&#34;text-align: justify;&#34;&gt;Já em uma aplicação que implementa a arquitetura de múltiplas camadas, onde estas mesmas foram projetadas de maneira desacoplada, utilizando interfaces e abstrações para a comunicação entre as mesmas, a mudança de tecnologia não seria apenas perfeitamente possível como poderia fazer parte da estratégia da aplicação para atingir a maior quantidade de dispositivos possíveis.&lt;/p&gt; 

&lt;p style=&#34;text-align: justify;&#34;&gt;Uma mesma aplicação poderia implementar múltiplas camadas de apresentação para desktop, web, múltiplos dispositivos mobile, e ao mesmo tempo não ficar presa a uma única tecnologia de acesso a dados, podendo a critério de custos ou preferência armazenar seus dados em um servidor Azure ou AWS com banco de dados SQL Server, Oracle ou DB2, dentre outros.&lt;/p&gt;

&lt;h2 id=&#34;considerações:dc8d0171b4151e528da98b589d5bc4fb&#34;&gt;Considerações&lt;/h2&gt;

&lt;p style=&#34;text-align: justify;&#34;&gt;O desenvolvimento de aplicações utilizando a arquitetura multicamadas é apenas uma das inúmeras metodologias que podem ser aplicadas no desenvolvimento da sua aplicação. E apesar de ser uma arquitetura largamente popular, em muitos casos, especialmente quando desenvolvendo aplicações com um baixo grau de complexidade, pode não ser a melhor alternativa. No final do dia cabe ao arquiteto ou desenvolvedor realizar a análise da cada situação e determinar a melhor abordagem para cada projeto.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Por Arthur D. de Andrade&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;andradedearthur@gmail.com&lt;/p&gt;

&lt;h4 id=&#34;referências:dc8d0171b4151e528da98b589d5bc4fb&#34;&gt;Referências&lt;/h4&gt;

&lt;p&gt;&lt;sup&gt;Microsoft Application Architecture Guide, 2nd Edition&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;&lt;sup&gt;Software Architecture Patterns by Mark Richards&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;&lt;sup&gt;Domain-Driven Design by Eric Evans&lt;/sup&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>about</title>
      <link>http://codingextre.me/about/</link>
      <pubDate>Sat, 04 Jun 2016 11:45:11 BRT</pubDate>
      
      <guid>http://codingextre.me/about/</guid>
      <description></description>
    </item>
    
    <item>
      <title>curriculo</title>
      <link>http://codingextre.me/cv/curriculo/</link>
      <pubDate>Sat, 04 Jun 2016 10:50:48 BRT</pubDate>
      
      <guid>http://codingextre.me/cv/curriculo/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
